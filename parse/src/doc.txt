1. Tabs for visualnode+datanode (+layoutnode)
    Schools
    >>>>
2. Every line is layoutnode
    Schools
    >>>>line1
    >>>>line2
    >>>>
3. escaping \\ -> \, \[ -> [
4. [link]           // link
   [link](http://google.com)
5. ![image]         // image
   ![image]
6. .attr=value
   .attr="value with spaces and \"quoting escaping"
7. +[link]          // embed
8. @[widget-data]   // widget
9. **bold**
10. *italics*
11. ~~italics~~
12. 1.      // changes the attributes like .numbered
    2.
    3.
13. -       // changes the attributes like .ordered
    -
    -
14. *       // changes the attributes like .ordered
    *
    *

{
    type: text
    name: "School $2000",
    children: [
        [
            {
                type: image,
                text: "foo",
            }
            {
                type: text,
                text: "bar",
                style: bold
            }
            {
                type: widget,
                ...attrs
            }
            {
                type: link,
                ...attrs
            }
        ]
        [
            {
                type: widget,
                ...attrs
            }
        ]
    ],
    attributes: {
        ordered: true,
    }
}

    layout node >         data
        visual node School    >  data
            layout node >       data
                visual node

#$%^&*


!@#$%^&*-+[]

+[Documentation]
    
    


Reference to node
[[node1]] replaces text with a hyperlink node1

Reference to node, travel to find
[[node1/.../node2]] replaces text with a hyperlink node2

Embed a node
{{[[embed]]: ((node id to embed))}} //fix syntax

Add attributes to a node
property_name::


1. tabs for subnodes
2. escaping \\ -> \, \[ -> [
3. \\[link]
4. ![image](qwe)
5. .attr=...  


3. autodetect 1., a.

John High School
    [
        [

        ]
    ]


John High School
    asdflkj  sdlkjf  sdflk

Andrei Gymnasium
Andrei Gymnasium
Andrei Gymnasium

Andrei Gymnasium Andrei Gymnasium Andrei Gymnasium

node
    layoutnode*
        node*
        attr*
        etc.

Andrei Gymnasium
    asdflkj ctrl enter
    sdlkjf ctrl enter
    sdflk enter
    .cost=1230
    enter
    sdflk enter
    
    

John High School
    - asdflkj 
        - sdlkjf 
                 .cost=1231
    - sdflk


avg cost


Schools
    French Lycee
        .university_educational_cost=1231
        Director
            House
                .cost=1231


/
====
Universities
Schools --------------------->  French Lycee
                                John High School
                                Andrei Gymnasium

====


====
Schools     visualnode, layoutnode, datanode
    1. French Lycee
        cost::2200
    2. John High School    
    3. [[Andrei Gymnasium]]
    4. q

====



Andrei Gymnasium

French Lyceen --cost--> price
price --value-->    2200
price --currency->  $

Schools
    /calc_avg/cost: 
    1. French Lycee
        cost:: $2200   
        [[curriculum_pdf]]
        276 Moliere Ave
    2. John High School
        cost::2500
        close to us at 120 JFK Street, would only be a 2m drive. ![image2]   // virtuaNode/[TextSpan, Image]
        ![image_1](http://...), add some notes on the same line

    3. Andrei Gymnasium


Node
    Node::TextSpan{text:Schools}
        Node::ListOrderedNode::TextSpan{text:French Lycee}
            Node::Attribute{cost:2200, unit:$}
            Node::PdfViewer{url: file/http}
        >>>> Node::TextSpan{text:276 Moliere Ave}
        Node::ListOrderedNode::TextSpan{text:John High School}
            virtualnode
                TextSpan
                Image

/Schools/2..../ flatten autocomplete  three lines, select one them, select image2


![logo](http://bestlogos.com/logo.png)
![logo](http://bestlogos.com/logo.png)

276 Moliere Ave

address::276 Moliere Ave


address::276 Mo... tab select it




[[Schools/1. French Lycee/276 Moliere Ave]] -> 276 Moliere Ave

/Map




{
    "/school": {
        name: "/school/text",
        list: [
            "/school/list/fl"
        ]
    }
    "/school": {
        type: "text",
        data: "Schools",
    }
}











Rust documentation
[[link]] ![[image]]



    


{
    "..."
    children: [
        {
            type:"text",
            data:" foo",
        }
    ]   
}









Node
    type
    data
Edge
    source
    target
    relationship



Footer -> TermsOfUsage, CookiePolicy, Else


parent -> {foo, bar, bazz}

footer -> logo
footer -> logo800x600 -> logo


footer -> footerreferences -> logo


VisualNodeAvisual
 child 
    virtualnode[node1, node2, node3]  link

datanode
    VisualNodeA -data, expired> dataNodeA

dataNodeA -> dataNodeA v2 >         dataNodeA v3    
  ------------latestversion-------------->

no version cotrol prev/next bak
no  nodes /datanode
edge with type /datachild

  +---\
 /     +--\
+     /    +
     /
    +

O -kind> N
O -> kind1 -> N
A -> kind2 -> B
C -> kind3 -> D





dataNodeA
    VisualNodeA
    VisualNodeB
    VisualNodeG


node2   
    /parent -> virtualnode
    /neighbours
    nodeA
    node1
    node3



p -> (n - p -> (n - n))


![logo]
![logo with size 800x600]


Footer
    # subnode
    just a text ![logo](http://bestlogos.com/logo.png) $[pdf](http://bestpdfs) i dont know
    i dont know

    ...

    #anothernode
    i dont know ![logo](http://bestlogos.com/logo.png)

    ![logo](http://bestlogos.com/logo.png) ![logo](http://bestlogos.com/logo.png)


Footer
    ![logo](http://bestlogos.com/logo.png)

Footer
    ![logo](http://bestlogos.com/logo.png) ![logo](http://bestlogos.com/logo.png)

footer node

Footer
    1.virtual node[text,dsafasfas, asdf]
    2.
    3.qn
    

node
    start typing
    add more text
    

Footer -> ??? -> "just a text"
Footer -> ??? -> ![logo](http://bestlogos.com/logo.png)
Footer -> ??? -> $[pdf](http://bestpdfs)
Footer -> ??? -> i dont know

graph

indradb createnode, edge,
save on rocksdatabase

Dgraph




Database
    WebSite
        Footer
            TermOfUsage
    Documents
        PdfViewer
            TermOfUsage

    -------------------------------------------All nodes---------------------------------
    ----------------------------Database-------------------------------     -TermOfUsage-
    ------------WebSite-----------    -----------Documents-----
    ------Footer------    .........    ------PdfViewer-----
    -TermOfUsage-          ..   ...     -TermOfUsage-  ...



    -------Document---------
    text [http://a.com] text2 [http://a.com]

    fotyij asdfjaopdf dsfopijaopdf asdofijaoi


    
     (link?) text3

     see http://a.com for details A.
     see http://b.com for details B.  // change for every occurence or just this one
    
    -------Document---------
    ability to reference
    text [reference: textA] text2 [reference:textB]

    ability to edit reference content
    text [mut ref: textA, changes: this is new text] text2 [reference:textB]                 textA this is new text

    ability to copy reference content
    text [reference: textA] text2 textB


    [[http://a.com] #ref for community edition users]


    // edit original textA 
    // make a copy
    // make an alias




Document.push([logo])
Document.push([logo])

[logo]



VisualNode => (Footer, TermOfUsage with index)





NodeView
    view
NodeEditor
    text
        modified the Node


![image,url:http://,width:800] -> ![image]
asdqw

node
    hello
    [logo] -> /logo
    buy
    [logo] -> /image,a,b,c 


/node/hello
/node/logo1 -> /logo
/node/buy
/node/logo2 -> /logo


node>
node>

node>
    node
        node
        node
        node


hello [logo], buy [logo]


struct VisualNode {
    node: Ref<Ref<Node>>

}


enum Node {
    Container(Vec<Arc<Node>>)
    Text(String),
    Image(url),
    Browser
    Map
    PdfViewer
        title
        pdf*
    Widget // map, pdfviewer, browser
}

struct NodeRef(Arc<Node>)

struct VisualNode {
    node: Arc<NodeRef>,
}


Node::Container([
    Node::Container([
        Node::Text("BrowserNode")
    ])
    Node::Container([
        Node::PDFViewer("School1")
        Node::Container([

        ])
        Node::Container([
            
        ])
    ])
    Node::Container([
        Node::Text("Maps")
    ])
    
    BrowserNode
    Containe(notes)
    PDFs
    
    Container(
        TextTitle(Locations)
         5x Maps
    )
    Container(
        Text(calculate commute)
        get(home-location>Maps)> 5x times
    )

])



[container]
    textA
    ref: [logo]
    textB
    ref: [logo]

[logo]



node
    node


Node: "text"
Node:
    Node: "text"
    Node: image

data

node
    node:Text



Node with text "some text"

Node
    text: "some text"


Node with text "**some text**"

Node
    style: bold
    text: "some text"

Node with text "**some text**" and text-title "title"

Node
    Title("title")
    Paragraph
        Text("text")

    Paragraph
        Text("text") Text("text") Text("text")
    Text("text")

    Image("http://wwsdfwadf")

node
    node:text between node distance
    node:text
    node:text


node
    custom
    node1(text bold, not-bold)-nestednode-image3|box boundary
    node4.

Node:109374019hroisajf98qheiufhbw08fuh2084f
    Node:En: qwd12e1wdqwsda

view node1 -> data node
view node2 -> data node

data node -> view node1, view node2

spacing
    group
        text
        text
    group
        text

<span style="style1">text</span>
<span style="style2">text</span>
<span style="style3">text</span>

<b> text <i> text </i> </i>


http://google.ru
    type more text
    widgets
http://google.com
    type more text

    Span
        Text (+style)
        InlineCode
        Code
        Link :text
            Text* (+style)
            InlineCode*
            Widget*
        Image :name
            Text*
            Link
        Widget
        Attribute




Edge case:

1. select text in sentence, click-drag to empty canvas area
        converts selected text into a node
        and adds an edge to newly created node on canvas
        text focus transferred to new node so user can keep typing
        (can be done with shortcut as well, maybe ctrl + > after a word or selection, when you are done
        type another shortcut, and return to previous node spot)

2. five nodes with attributes
    connect them to new node
    as user types in the new node, he can link to the attributes as reference or value
    by typing the budget is /node1/budget


  sentence
node1  node2
this was a sentence

 

textspan :# heading
   
    textspan  emojispan ![thumbsup]

## heading
text


$company_name$
Our company ......

![Image][company_logo]


![company_logo]: http://url/b.jpg
![thumbsup]: http://url/b.jpg
$company_name$: Best Compnay in the world


Paragraph
    Text abc
    Text bcd
    Paragraph
        Text 123
        Text 234
    Text cdf

node is 100 pixel wide
text abc. text bcd.
widget:linebreak
textspan:style, dfg

<br/>

aa asd

ab

Node: attr.inline

span div

display: inline
display: inline-block

<span>
    <span>abc</span>
    <span>bcd</span>
    <div>
        <span>123</span>
        <span>234</span>
    </div>
    <span>abc</span>
    <span>bcd</span>
</span>

abc bcd 123 abc bcd a |
        234           |
asd asd

[andrey@qweqweqljhfakldjfhlaksjdf.ru:FirstName]

note to Andrei 

user: andrey@qweqweqljhfakldjfhlaksjdf.ru
    Firstname: Andey
    Lastname

UniquePerson
    Firstname
    Lastname


123 234 {
    aaa
    bbb
} 345 546 

123
234

cdf

Node
    Paragraph*
        Span*
    Heading*
        Span*

    Span
        Text (+style)
        InlineCode
        Code
        Link :text
            Text* (+style)
            InlineCode*
            Widget*
        Image :name
            Text*
            Link
        Widget
        Attribute

abc | <b>                </b>
         bcd | <i>   </i>
                  cdf


Node
    This is readlly *great* node. I like it. ![great_node](http:://)
    ---------------|-------|-----|-----------|--------------------==



I like you **your** idea! [:thumbsup] Let's implement thi

[:thumbsup]
    children

Node
    all images  
        [Image]

Node
    Paragraph, InlineImage

    (build:passed)
    (version:1.0)


Node
    link to smile photo


== qweqwe

teasdaxt...text asda sd 
== heading
:prop= value
Prop: 

Node
    Node
    Node

Node
    child node: Span
    keep typing within

    








[![Foo](http://www.google.com.au/images/nav_logo7.png)](http://google.com.au/)

[Link](http://a.com) - URL 

[Link](Node/Paragraph/Span) - sub node

!inline!(Node/Paragraph/Span) - change this text, in




    abc<b>bcd<i>cdf</i></b>
    abc
    bcd +bold
    cdf +bold+italic

    Text abc
    Bold
        Text bcd
        Italic
            Text cdf

        parent node
            child: TextSpan(bold,italic text value), TextSpan(italic), InlineWidge(MapWidget())